<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QModInstaller</name>
    </assembly>
    <members>
        <member name="T:QModManager.API.IQMod">
            <summary>
            All public data about a QMod.
            </summary>
        </member>
        <member name="P:QModManager.API.IQMod.Id">
            <summary>
            The ID of the mod <para/>
            Can only contain alphanumeric characters and underscores: (<see langword="a-z"/>, <see langword="A-Z"/>, <see langword="0-9"/>, <see langword="_"/>)
            </summary>
        </member>
        <member name="P:QModManager.API.IQMod.DisplayName">
            <summary>
            The display name of the mod
            </summary>
        </member>
        <member name="P:QModManager.API.IQMod.Author">
            <summary>
            The author of the mod
            </summary>
        </member>
        <member name="P:QModManager.API.IQMod.SupportedGame">
            <summary>
            The game this mod was developed for.
            </summary>
        </member>
        <member name="P:QModManager.API.IQMod.RequiredMods">
            <summary>
            The dependencies of the mod and their optional minimum required version
            </summary>
        </member>
        <member name="P:QModManager.API.IQMod.ModsToLoadBefore">
            <summary>
            A list of mods, before which, this mod will load
            </summary>
        </member>
        <member name="P:QModManager.API.IQMod.ModsToLoadAfter">
            <summary>
            A list of mods, after which, this mod will load
            </summary>
        </member>
        <member name="P:QModManager.API.IQMod.LoadedAssembly">
            <summary>
            The assembly of this mod <para/>
            Check if <see langword="null"/> before using
            </summary>
        </member>
        <member name="P:QModManager.API.IQMod.AssemblyName">
            <summary>
            The assembly name of the mod
            </summary>
        </member>
        <member name="P:QModManager.API.IQMod.ParsedVersion">
            <summary>
            The version of the mod.
            </summary>
        </member>
        <member name="P:QModManager.API.IQMod.Enable">
            <summary>
            Whether or not this mod is enabled
            </summary>
        </member>
        <member name="P:QModManager.API.IQMod.IsLoaded">
            <summary>
            Whether or not this mod has been loaded
            </summary>
        </member>
        <member name="T:QModManager.API.IQModAPI">
            <summary>
            An set of services provided by QModManager for mods to use.
            </summary>
        </member>
        <member name="M:QModManager.API.IQModAPI.GetAllMods">
            <summary>
            Gets a list all mods being tracked by QModManager.
            </summary>
            <returns>A read only list of mods containing all of the loaded mods</returns>
        </member>
        <member name="M:QModManager.API.IQModAPI.GetMyMod">
            <summary>
            Returns the mod from the assembly which called this method
            </summary>
        </member>
        <member name="M:QModManager.API.IQModAPI.GetMod(System.Reflection.Assembly)">
            <summary>
            Returns a mod from an <see cref="T:System.Reflection.Assembly"/>
            </summary>
            <param name="modAssembly"></param>
        </member>
        <member name="M:QModManager.API.IQModAPI.GetMod(System.String)">
            <summary>
            Finds a specific mod by its unique <see cref="P:QModManager.API.IQMod.Id"/> value.
            </summary>
            <param name="id">The mod ID.</param>
            <returns>The <see cref="T:QModManager.API.IQMod"/> instance of the mod if found; otherwise returns <c>null</c>.</returns>
        </member>
        <member name="M:QModManager.API.IQModAPI.ModPresent(System.String)">
            <summary>
            Checks whether or not a mod is present based on its unique <see cref="P:QModManager.API.IQMod.Id"/> value.
            </summary>
            <param name="id">The mod ID.</param>
            <returns><c>True</c> if the mod is in the collection of mods to load; Otherwise <c>false</c>.</returns>
        </member>
        <member name="T:QModManager.API.IQModServices">
            <summary>
            An set of services provided by QModManager for mods to use.
            </summary>
        </member>
        <member name="M:QModManager.API.IQModServices.FindModById(System.String)">
            <summary>
            Finds a specific mod by its unique <see cref="P:QModManager.API.IQMod.Id"/> value.
            </summary>
            <param name="modId">The mod ID.</param>
            <returns>The <see cref="T:QModManager.API.IQMod"/> instance of the mod if found; otherwise returns <c>null</c>.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:QModManager.API.IQModServices.FindModByAssembly(System.Reflection.Assembly)" -->
        <member name="T:QModManager.API.ModLoading.QModCoreAttribute">
            <summary>
            Identifies the patching class for your QMod.
            </summary>
            <seealso cref="T:QModManager.API.ModLoading.QModPatch"/>
            <seealso cref="T:QModManager.API.ModLoading.QModPrePatch"/>
            <seealso cref="T:QModManager.API.ModLoading.QModPostPatch"/>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:QModManager.API.ModLoading.QModCoreAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QModManager.API.ModLoading.QModCoreAttribute" /> class.
            </summary>
        </member>
        <member name="T:QModManager.API.ModLoading.QModPatch">
            <summary>
            Identifies a normal patch method for a QMod.<para/>
            This method must be public, must take no parameters, and must return either <seealso cref="T:System.Void"/> or <seealso cref="!:PatchResults"/>.<para/>
            ALERT: The class that defines this method must have a <seealso cref="T:QModManager.API.ModLoading.QModCoreAttribute"/> attribute.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:QModManager.API.ModLoading.QModPatch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QModManager.API.ModLoading.QModPatch"/> class for normal patching.        
            </summary>
        </member>
        <member name="T:QModManager.API.ModLoading.QModPostPatch">
            <summary>
            Identifies a post-patch method for a QMod.<para/>
            This method must be public, must take no parameters, and must return either <seealso cref="T:System.Void"/> or <seealso cref="!:PatchResults"/>.<para/>
            ALERT: The class that defines this method must have a <seealso cref="T:QModManager.API.ModLoading.QModCoreAttribute"/> attribute.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:QModManager.API.ModLoading.QModPostPatch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QModManager.API.ModLoading.QModPostPatch"/> class.
            </summary>
        </member>
        <member name="M:QModManager.API.ModLoading.QModPostPatch.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QModManager.API.ModLoading.QModPostPatch" /> class.
            </summary>
            <param name="secretPassword">The secret password that proves you read the documentation.</param>
        </member>
        <member name="T:QModManager.API.ModLoading.QModPrePatch">
            <summary>
            Identifies a pre-patch method for a QMod.<para/>
            This method must be public, must take no parameters, and must return either <seealso cref="T:System.Void"/> or <seealso cref="!:PatchResults"/>.<para/>
            ALERT: The class that defines this method must have a <seealso cref="T:QModManager.API.ModLoading.QModCoreAttribute"/> attribute.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:QModManager.API.ModLoading.QModPrePatch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QModManager.API.ModLoading.QModPrePatch"/> class.
            </summary>
        </member>
        <member name="M:QModManager.API.ModLoading.QModPrePatch.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QModManager.API.ModLoading.QModPrePatch"/> class.
            </summary>
            <param name="secretPassword">The secret password that proves you read the documentation.</param>
        </member>
        <member name="T:QModManager.API.QModAPI">
            <summary>
            Minimal legacy support only.
            </summary>
            <seealso cref="T:QModManager.API.IQModAPI" />
        </member>
        <member name="P:QModManager.API.QModAPI.Main">
            <summary>
            Minimal legacy support only.
            </summary>
        </member>
        <member name="M:QModManager.API.QModAPI.GetAllMods">
            <summary>
            Gets a list all mods being tracked by QModManager.
            </summary>
            <returns>A read only list of mods containing all of the loaded mods</returns>
        </member>
        <member name="M:QModManager.API.QModAPI.GetMyMod">
            <summary>
            Returns the mod from the assembly which called this method
            </summary>
        </member>
        <member name="M:QModManager.API.QModAPI.GetMod(System.Reflection.Assembly)">
            <summary>
            Returns a mod from an <see cref="T:System.Reflection.Assembly"/>
            </summary>
            <param name="modAssembly"></param>
        </member>
        <member name="M:QModManager.API.QModAPI.GetMod(System.String)">
            <summary>
            Finds a specific mod by its unique <see cref="P:QModManager.API.IQMod.Id"/> value.
            </summary>
            <param name="id">The mod ID.</param>
            <returns>The <see cref="T:QModManager.API.IQMod"/> instance of the mod if found; otherwise returns <c>null</c>.</returns>
        </member>
        <member name="M:QModManager.API.QModAPI.ModPresent(System.String)">
            <summary>
            Checks whether or not a mod is present based on its unique <see cref="P:QModManager.API.IQMod.Id"/> value.
            </summary>
            <param name="id">The mod ID.</param>
            <returns><c>True</c> if the mod is in the collection of mods to load; Otherwise <c>false</c>.</returns>
        </member>
        <member name="T:QModManager.API.QModServices">
            <summary>
            Services offered to mods.
            </summary>
            <seealso cref="T:QModManager.API.IQModServices" />
        </member>
        <member name="P:QModManager.API.QModServices.Main">
            <summary>
            Gets the main entry point into the QMod Services.
            </summary>
            <value>
            The main.
            </value>
        </member>
        <member name="M:QModManager.API.QModServices.FindModById(System.String)">
            <summary>
            Finds the mod by identifier.
            </summary>
            <param name="modId">The mod identifier.</param>
            <returns></returns>
        </member>
        <member name="M:QModManager.API.QModServices.ModPresent(System.String)">
            <summary>
            Checks whether or not a mod is present based on its ID.
            </summary>
            <param name="modId">The mod ID.</param>
            <returns>
              <c>True</c> if the mod is in the collection of mods to load; Otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:QModManager.API.QModServices.FindModByAssembly(System.Reflection.Assembly)">
            <summary>
            Finds the mod by assembly.
            </summary>
            <param name="modAssembly">The mod assembly.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:QModManager.API.QModServices.GetAllMods">
            <summary>
            Gets a list all mods being tracked by QModManager.
            </summary>
            <returns>
            A read only list of mods containing all of the loaded mods
            </returns>
        </member>
        <member name="M:QModManager.API.QModServices.GetMyMod">
            <summary>
            Returns the mod from the assembly which called this method
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:QModManager.API.QModServices.GetMod(System.Reflection.Assembly)">
            <summary>
            Returns a mod from an <see cref="T:System.Reflection.Assembly" />
            </summary>
            <param name="modAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:QModManager.API.QModServices.GetMod(System.String)">
            <summary>
            Returns a mod from an ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:QModManager.API.RequiredQMod">
            <summary>
            Identifies a required mod and an optional minimum version.
            </summary>
        </member>
        <member name="P:QModManager.API.RequiredQMod.Id">
            <summary>
            Gets the required mod's ID.
            </summary>
        </member>
        <member name="P:QModManager.API.RequiredQMod.RequiresMinimumVersion">
            <summary>
            Gets a value indicating whether the mod must be at a minimum version for compatibility.
            </summary>
        </member>
        <member name="P:QModManager.API.RequiredQMod.MinimumVersion">
            <summary>
            Gets the minimum version this mod should be at.<para/>
            If <see cref="P:QModManager.API.RequiredQMod.RequiresMinimumVersion"/> is <c>false</c>, this will return a default value.
            </summary>
        </member>
        <member name="T:QModManager.API.QModGame">
            <summary>
            Identifies the Subnautica games.
            </summary>
        </member>
        <member name="F:QModManager.API.QModGame.None">
            <summary>
            No game.
            </summary>
        </member>
        <member name="F:QModManager.API.QModGame.Subnautica">
            <summary>
            Subnautica.
            </summary>
        </member>
        <member name="F:QModManager.API.QModGame.BelowZero">
            <summary>
            Subnautica: Below Zero.
            </summary>
        </member>
        <member name="F:QModManager.API.QModGame.Both">
            <summary>
            Both Subnautica and Below Zero.
            </summary>
        </member>
        <member name="T:QModManager.API.QModPatchAttributeBase">
            <summary>
            Base class to all attributes that identify QMod patch methods.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:QModManager.API.QModPatchAttributeBase.#ctor(QModManager.Patching.PatchingOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:QModManager.API.QModPatchAttributeBase"/> class.
            </summary>
            <param name="patchOrder">The patch order.</param>
        </member>
        <member name="M:QModManager.API.QModPatchAttributeBase.#ctor(QModManager.Patching.PatchingOrder,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QModManager.API.QModPatchAttributeBase" /> class.
            </summary>
            <param name="patchOrder">The patch order.</param>
            <param name="secretPasword">The secret pasword.</param>
            <exception cref="T:QModManager.Patching.FatalPatchingException">This modder has not read the documentation and should not be using prepatch/postpatch functions.</exception>
        </member>
        <member name="M:QModManager.API.QModPatchAttributeBase.ValidateSecretPassword(System.Reflection.MethodInfo,QModManager.Patching.QMod)">
            <summary>
            Validates the that modder has read the documentation.
            </summary>
            <param name="method">The method.</param>
            <param name="mod">The mod.</param>
            <exception cref="T:QModManager.Patching.FatalPatchingException">This modder has not read the documentation and should not be using prepatch/postpatch functions.</exception>
        </member>
        <member name="T:QModManager.DataStructures.ISortable`1">
            <summary>
            Requirements to function within the <seealso cref="T:QModManager.DataStructures.SortedCollection`2"/>
            </summary>
            <typeparam name="IdType">The ID type.</typeparam>
        </member>
        <member name="T:QModManager.Patching.Patcher">
            <summary>
            The main class which handles all of QModManager's patching
            </summary>
        </member>
        <member name="T:QModManager.Patching.IQModSerialiable">
            <summary>
            Enforces the requirements of the mod.json file for legacy mod loading.
            </summary>
        </member>
        <member name="F:QModManager.Patching.PatchingOrder.PreInitialize">
            <summary>
            For pre-initialize patch methods
            </summary>
        </member>
        <member name="F:QModManager.Patching.PatchingOrder.NormalInitialize">
            <summary>
            For normal patch methods
            </summary>
        </member>
        <member name="F:QModManager.Patching.PatchingOrder.PostInitialize">
            <summary>
            For post-initialize patch methods
            </summary>
        </member>
        <member name="P:QModManager.Patching.QModPlaceholder.QModManager">
            <summary>
            The dummy <see cref="T:QModManager.Patching.QMod"/> which is used to represent QModManager
            </summary>
        </member>
        <member name="P:QModManager.Utility.Logger.EnableDebugLogging">
            <summary>
            Gets a value indicating whether debug logs are enabled.
            To enable debug logs, simple create an empty file named <c>"QModDebug.txt"</c> within the Subnautica folder.
            </summary>
            <value>
              <c>true</c> if debug logs are enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:QModInstaller.QModPatcher">
            <summary>
            Container class for the entry point
            </summary>
        </member>
        <member name="M:QModInstaller.QModPatcher.Patch">
            <summary>
            QModManager entry point
            </summary>
        </member>
    </members>
</doc>
